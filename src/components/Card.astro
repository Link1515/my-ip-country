<div
  id="card"
  class="flex flex-col p-4 text-[#181a1a] transition-colors duration-300 dark:text-zinc-200"
>
  <h3 id="ip" class="text-center font-bold"></h3>

  <div class="mb-2 flex items-center justify-center gap-1 text-lg">
    <a id="map" class="relative z-20 grid place-items-center" target="_blank">
      <span class="material-symbols-outlined">location_on</span>
    </a>
    <h1 id="country"></h1>
    <span id="flagEmoji" class="lg:hidden"></span>
    <div class="hidden w-6 overflow-hidden rounded-sm lg:block">
      <img id="flagImage" alt="flag" />
    </div>
  </div>

  <div class="grid grid-cols-[24px_auto] gap-x-2 gap-y-1">
    <span class="material-symbols-outlined mt-0.5">public</span>
    <h3 id="region"></h3>
    <span class="material-symbols-outlined mt-0.5">translate</span>
    <h3 id="language"></h3>
    <span class="material-symbols-outlined mt-0.5">paid</span>
    <h3 id="currency"></h3>
    <span class="material-symbols-outlined mt-0.5">groups</span>
    <h3 id="population"></h3>
  </div>
</div>

<p
  id="errorMessage"
  class="grid min-h-[240px] place-items-center p-4 text-[#181a1a] transition-colors dark:text-zinc-200"
  style="display: none;"
>
</p>

<script>
  import { getHTMLElement, formatCountryInfo } from '~/utils';
  import { requestIpAndCountry, requestCountryInfo } from '~/requests';

  const ipEl = getHTMLElement('#ip');
  const countryEl = getHTMLElement('#country');
  const mapEl = getHTMLElement<HTMLAnchorElement>('#map');
  const currencyEl = getHTMLElement('#currency');
  const languageEl = getHTMLElement('#language');
  const regionEl = getHTMLElement('#region');
  const populationEl = getHTMLElement('#population');
  const flagEmojiEl = getHTMLElement('#flagEmoji');
  const flagImageEl = getHTMLElement<HTMLImageElement>('#flagImage');

  try {
    const { ip, country } = await requestIpAndCountry();
    const countryInfo = await requestCountryInfo(country);
    const formattedCountryInfo = formatCountryInfo(countryInfo);

    ipEl.innerText = ip;
    countryEl.innerText = formattedCountryInfo.name;
    currencyEl.innerText = formattedCountryInfo.currency;
    mapEl.href = formattedCountryInfo.map;
    languageEl.innerText = formattedCountryInfo.language;
    regionEl.innerText = formattedCountryInfo.region;
    populationEl.innerText = formattedCountryInfo.population.toString();
    flagEmojiEl.innerText = formattedCountryInfo.flagEmoji;
    flagImageEl.src = formattedCountryInfo.flag;
  } catch (error) {
    const cardEl = getHTMLElement('#card');
    const errorMessageEl = getHTMLElement('#errorMessage');

    cardEl.style.display = 'none';
    errorMessageEl.style.display = '';
    errorMessageEl.innerText =
      "Unfortunately, we're currently unable to retrieve your IP address. Please try again later.";
  } finally {
    window.appReady();
  }
</script>
